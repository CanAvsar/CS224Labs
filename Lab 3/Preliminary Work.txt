CS224 
Lab03
Section 6
Can Avşar
21902111

# CS224 Lab03 Part 1: InstructionCount
# Can Avşar
# 21902111

	# Text segment
	
	.text
	
	start:
	la $a0, start			# Set the beginning address to the label start
	la $a1, done			# Set the end address to the label done
	
	add $s0, $0, $0			# Adding sample instructions
	add $s0, $0, $0
	add $s0, $0, $0
	add $s0, $0, $0
	add $s0, $0, $0
	lw $t1, start
	lw $t1, start
		
	jal CountInstruction		# Calling the subprogram to count instructions
	
	move $s0, $v0 			# Moving the values returned from the subprogram for printing
	move $s1, $v1
	
	la $a0, promptaddprogram	# Print prompt
	li $v0, 4 
	syscall
	move $a0, $s0
	li $v0, 1			# Print the add count value
 	syscall
 	
 	la $a0, promptlwprogram		# Print prompt
	li $v0, 4 
	syscall
 	move $a0, $s1
 	li $v0, 1			# Print the lw count value
 	syscall
	
	la $a0, CountInstruction 	# Set the beginning address to the label CountInstruction
	la $a1, EndCountInstruction	# Set the end address to the label EndCountInstruction
	
	jal CountInstruction		# Calling the subprogram to count instructions
	
	move $s0, $v0			# Moving the values returned from the subprogram for printing
	move $s1, $v1
	
	la $a0, promptaddsubprogram	# Print prompt
	li $v0, 4 
	syscall
	move $a0, $s0
	li $v0, 1			# Print the add count value
 	syscall
 	
 	la $a0, promptlwsubprogram	# Print prompt
	li $v0, 4 
	syscall
	move $a0, $s1
 	li $v0, 1			# Print the lw count value
 	syscall
 	
	done: 
	li $v0, 10			# Exit the program
	syscall
	
	CountInstruction:
	move $s0, $a0			# Set $s0 the beginning adress
	move $s1, $a1			# Set $s0 the beginning adress
	li $s2, 0			# Initialize the ADD counter
	li $s3, 0			# Initialize the LW counter
	li $s4, 0x23			# Set the first 6 bits of LW in HEX format: 100011
	li $s5, 0x20			# Set the last 6 bits of ADD in HEX format: 100000
	
	Loop:
	bgt $s0, $s1, EndLoop		# If the program goes to the end then exit
	lw $t0, 0($s0)			# Set the value to a register for shifting
	srl $t1, $t0, 26		# Make the value shifted to right to get the value at the end
	bne $t1, $s4, continue		# If they are not equal, continue without adding
	addi $s3, $s3, 1		# If they are equal to value set, continue adding
	continue:
	sll $t1, $t0, 26		# Make the value shifted to left to get the value at the beginning
	srl $t1, $t1, 26		# Make the value shifted to right to get the value at the end
	bne $t1, $s5, continue2		# If they are not equal, continue without adding
	srl $t1, $t0, 26		# Also check for the 000000 in the beginning
	bne $t1, $0, continue2		# If they are not equal to value set, continue without adding
	addi $s2, $s2, 1		# If they are equal, continue adding
	continue2:
	
	addi $s0, $s0, 4		# Go to the next address
	j Loop
	
	EndLoop:
	move $v0, $s2			# Return the ADD counter
    	move $v1, $s3			# Return the LW counter
	jr $ra				# Go back to the caller
	EndCountInstruction:
	
	# Data segment 
	.data
	promptaddprogram:.asciiz "\nThe count of ADD instruction in the main program: "
	promptlwprogram:.asciiz "\nThe count of LW instruction in the main program: "
	promptaddsubprogram:.asciiz "\nThe count of ADD instruction in the InstructionCount subprogram: "
	promptlwsubprogram:.asciiz "\nThe count of LW instruction in the InstructionCount subprogram: "
	

-------------------------------------------------------------------------------------

# CS224 Lab03 Part 2: Recursive Division
# Can Avşar
# 21902111

	# Text segment
	
	.text
	Main:
	
	li $v1, 0			# Initialize $v1, the result, on every call
	
	la $a0, promptdividend		# Prompt for the dividend
	li $v0, 4 
	syscall
	li $v0, 5			# Get the dividend
	syscall
	move $s1, $v0			# Pass the value to #s1
	
	la $a0, promptdivider		# Prompt for the divider
	li $v0, 4 
	syscall
	li $v0, 5			# Get the divider
	syscall
	move $s2, $v0			# Pass the value to #s2
	
	move $a0, $s1			# Pass the dividend to $a0 for the function call
	move $a1, $s2			# Pass the divider to $a1 for the function call
	
	jal Divide
	
	la $a0, promptresult		# Prompt the result
	li $v0, 4 
	syscall
	move $a0, $v1			# Print the result
 	li $v0, 1
 	syscall
 	
 	la $a0, promptcontinue		# Prompt the prompt for continue
	li $v0, 4 
	syscall
	li $v0, 5			# Get the continue input
	syscall
	move $s3, $v0			# Pass the value to #s2
	
	beq $s3, 1, Main		# If the value get is 1, continue
 	
 	li $v0, 10             		# Exit the program
    	syscall
	
	Divide:
	addi $sp, $sp, -8  		# Make space for 2 items on the stack
	sw $a0, 4($sp)   		# Push $a0 to the stack
	sw $ra, 0($sp)   		# Push $ra to the stack
	add $t1, $a0, 1			# Add 1 to the divider to control less than and equal
	slt $t0, $a1, $t1		# Check if a1 <= a0
	beq $t0, 1, Else		# If no, then a0>a1, then go to else and call the function again
	addi $v1, $v1, 0		# If yes, then return v1 (result)
	addi $sp, $sp, 8		# Release space on the stack
	jr $ra
	
	Else: 
	sub $a0, $a0, $a1		# Subtract the divider from dividend
	addi $v1, $v1, 1		# Increment the counter (result)
	
	jal Divide			# Recursive function call
	
	lw $a0, 4($sp)			# Get $a0 to the stack
	lw $ra, 0($sp)			# Get $ra to the stack
	addi $sp, $sp, 8		# Release space on the stack
	jr   $ra


	# Data segment
	.data    
	promptdividend:.asciiz "\nEnter the value going to be divided: "
	promptdivider:.asciiz "\nEnter the divider value: "
	promptresult:.asciiz "\nEnter the result is "
	promptcontinue:.asciiz "\nDo you want to continue? If Yes, press 1. "
	

	
	
	
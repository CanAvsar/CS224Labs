Can Avşar
21902111
CS224 Section 6
Lab02 

PART 3

# CS224 Lab02 Part 3: Process Dynamic Array
# Can Avşar
# 21902111

	# Text segment
	
	.text
	main:

   	#la $a0, array        		# Declare the value arr[i] (first item of the array)
    	#lw $a1, arraySize		# Declare the array size

    	jal GetArray			# Jump to the PrintArray subprogram
    	
    	move $a0, $v0        		# Declare the value arr[i] (first item of the array)
    	move $s6, $v0			# Set the value again 
    	
    	move $a1, $v1			# Declare the array size
    	move $s7, $v1			# Set the value again
    	
    	jal CheckSymmetric		# Jump to the CheckSymmetric subprogram
	
	move $a0, $s6        		# Declare the value arr[i] (first item of the array)
    	move $a1, $s7			# Declare the array size
    	
	jal FindMinMax			# Jump to the FindMinMax subprogram
	
	move $t0, $v0
	move $t1, $v1
	
	la $a0, promptmin		# Print prompt
	li $v0, 4 
	syscall
							
 	move $a0, $t0			# Print the value
 	li $v0, 1
 	syscall
 	
 	la $a0, promptmax		# Print prompt
	li $v0, 4 
	syscall
 	
 	li $v0, 1			# Print the value
 	move $a0, $t1
 	syscall
	
	li $v0, 10             		 # Exit
    	syscall
    
    
	GetArray:
	
	la $a0, promptentersize		# Prompt the array size
	li $v0, 4 
	syscall

	
	
	li $v0, 5			# Get the array size
	syscall
	move $s2, $v0			# Pass the value to #s2
	
	
	mul $s4, $s2, 4			# Calculate the bytes needed
	
	move $a0, $s4 			# Allocate array size * 4 bit memory space
	li $v0, 9			# Used for dynamic storage allocation
	syscall 			
	
	move $s1, $v0 			# $s1 <== $v0, $s1 points to the beginning of the array.
	move $s5, $v0 			# $s1 <== $v0, $s1 points to the beginning of the array.
	
	li $s0, 0			# Initialize the value i to 0
	
	Loop:				# For loop to array size getting array elements and set them to their location
					
	bge $s0, $s2, EndLoop
	
	la $a0, promptenterelement	# Prompt for entering the element 
	li $v0, 4 
	syscall
	
	li $v0, 5			# Get the array element
	syscall
	#move $s1, $v0			# Pass the value to #s1
	sw $v0, ($s1)			# Pass the value to #s1
	
	add $s1, $s1, 4             	# Make the element the next element
	addi $s0, $s0, 1
	j Loop
	
	EndLoop: 
	#sub $s1, $s1, 4
	#sub $s1, $s1, $t1
	 
	# move $a0, $s1			# Array first address
	add $a0, $s5, $zero
	add $a1, $s2, $0		# ArraySize
	
	addi $sp, $sp, -4 
	sw $ra, 0($sp)
	
	jal PrintArray 		# Jump to PrintArray
	
	lw $ra, 0($sp) 
	addi $sp, $sp, 4
	
	move $v0, $s5			# Pass the array beginning address to the main
	move $v1, $s2			# Pass the arraysize to the main
	
	jr $ra # Go to the main
	
	
    
    
    
	PrintArray:
	li $s0, 0			# Initialize the value i to 0
	#move $s1, $a0			# Array first address 
	move $s1, $a0
	
	add $s2, $a1, $0			# ArraySize
	

	Print:
	bge  $s0, $s2, EndPrint 	# If the loop passed, go to the next
    	lw $t1, ($s1)			# Pass the first element to a register
   	
   	li $v0, 1			# Print the value
 	move $a0, $t1
 	syscall
 	 
   	la $a0, space			# Print space
	li $v0, 4 
	syscall
	
    	addi $s1, $s1, 4             	# Go to next element
    	addi $s0, $s0, 1      		# Increment i (i = i + 1)
    	j Print              		# Jump back to the loop again
	EndPrint:
	move $s3, $ra
	jr $ra   			# Jump back to the caller
	
	
	CheckSymmetric:
	
	li $s0, 0			# Initialize the value i to 0
	move $s1, $a0			# Array first address
	move $s2, $a1			# ArraySize
	
    	add $t2, $t2, 2			# This register holds the value 2
    	add $t4, $t4, 4			# This register holds the value 4
    	mul $t3, $t4, $s2 		# This operations make the passing from the first element to last element
    	sub $t3, $t3, $t4		# (arrsize - 1) * 4 = 4 * arrsize - 4 gives us the bits between the first value's address and the last value's address
   	div $s2, $t2			# This operations sets the limit for  
    	mflo $t5			# check until the arrsize/2
    	add $s3, $s1, $t3		# This is the value array[arraySize-1] (last item of the array)
	
	Check:
   	bge  $s0, $t5, Symmetric 	# If the loop passed correctly, it is symmetric
    	lw $t1,($s1)			# Pass the first element to a register
    	lw $t2,($s3)			# Pass the last element to a register
    	bne $t1, $t2, NotSymmetric	# If first and last elements are not equal, array is not symmetric
    	addi $s1, $s1, 4             	# Make the first element the next element
    	addi $s3, $s3, -4 		# Make the last element the previous element
    	addi $s0, $s0, 1      		# Increment i (i = i + 1)
    	j Check		                # Jump back to the loop again
	Symmetric:
	la $a0, promptsymmetric		# Print prompt
	li $v0, 4 
	syscall
	jr $ra				# Jump back to the caller
	NotSymmetric:
	la $a0, promptnotsymmetric	# Print prompt
	li $v0, 4 
	syscall 
	jr $ra     			# Jump back to the caller
	
	
	FindMinMax:
	li $s0, 0			# Initialize the value i to 0
	move $s1, $a0			# Array first address
	move $s2, $a1			# ArraySize
    	lw $s3, ($s1)			# Initialize the value min to first element of the array
	Find:
	bge $s0, $s2, EndFind  		# If the loop passed correctly, it is symmetric
	lw $t1,($s1)			# Pass the first element to a register
    	slt $t2, $t1, $s3      		# checks if min value > (current element)
    	beq $t2, $0, Greater		# Check >
    	j NotGreater			# jump to NotGreater if the value is not greater
    	
    	Greater:
    	j FindMax			# Jump back to the caller
    	
    	NotGreater:
    	add $s3, $0, $t1		# Set the value min to other element of the array
    	j FindMax			# Jump back to the caller
    	
    	FindMax:
    	slt $t2, $t1, $s4      		# checks if min value > (current element)
    	beq $t2, 1, Less		# Check >
    	j NotLess			# Jump to NotGreater if the value is not greater
    	
    	Less:
    	j Increment			# Jump to Increment
    	
    	NotLess:
    	add $s4, $0, $t1		# Set the value max to other element of the array
    	j Increment			# Jump to Increment
    		
    	
    	
    	Increment:
    	add $s1, $s1, 4             	# Make the first element the next element
    	addi $s0, $s0, 1      	 	# Increment i (i = i + 1)
    	j Find				# Jump to the loop again
    	
    	EndFind:
    	move $v0, $s3			# Set min to v0
    	move $v1, $s4			# Set max to v1

    	jr $ra				# Jump back to the caller
    	
    	
	
	
	# Data segment
	.data    
	promptentersize:.asciiz "\nEnter the array size:"
	promptenterelement:.asciiz "\nEnter the element going to be added to the array:"
	promptnotsymmetric:.asciiz "\nThe array above is not symmetric."
	promptsymmetric: .asciiz "\nThe array above is symmetric "
	promptmin: .asciiz "\nMin value: "
	promptmax: .asciiz "\nMax value: "
	space: .asciiz " "  			# Space


------------------------------------------------------


PART 4

# CS224 Lab02 Part 4: Count Bit Pattern
# Can Avşar
# 21902111

	# Text segment
	
	.text
	
	main:
	
	# Get the pattern, value to be searched and pattern bit length
	
	la $a0, enterprompt2		# Prompt for getting 
	li $v0, 4 
	syscall
	li $v0, 5			# Get the value to be searched
	syscall
	move $a1, $v0			# Pass the value to a variable
	
	la $a0, enterprompt3		# Prompt for getting
	li $v0, 4 
	syscall
	li $v0, 5			# Get the pattern length
	syscall
	move $a2, $v0			# Pass the value to a variable
	
	la $a0, enterprompt		# Prompt for getting
	li $v0, 4 
	syscall
	li $v0, 5			# Get the pattern
	syscall
	move $a0, $v0			# Pass the value to a variable
	
	

	
	add $s3, $a0, $0		# Move pattern into a variable to print (because it changes)
	
	jal CountPattern		# Call the subprogram to count occurrences
	
	move $s4, $v0
	
	la $a0, countprompt		# Print prompt
	li $v0, 4 
	syscall
	
	move $a0, $s3			# Print the pattern
 	li $v0, 34
 	syscall
 	
 	la $a0, countprompt2		# Print prompt2
	li $v0, 4 
	syscall
 	
 	move $a0, $a1			# Print the value
 	li $v0, 34
 	syscall
 	
 	la $a0, countprompt3		# Print prompt3
	li $v0, 4 
	syscall
	
	move $a0, $s4			# Print the occurence count
    	li $v0, 1			
    	syscall          
    	
    	li $v0, 10             		 # End program
    	syscall  
	
	# Make a loop to 4 to search the bit
	
	CountPattern:
	move $t0, $a0                 	# Move pattern into a register
	move $t1, $a1                 	# Move value into a register
	move $t2, $a2                 	# Move number into a register
	li $s0, 0			# Initialize the value i to 0
	li $s1, 0			# Initialize the occurrence count to 0
	addi $t5, $0, 32
	div $t5, $t2			# (32 / patternlength) is the limit for the for loop
	mflo $t4
	sub $t8, $t5, $t2		# 32 - patternlength
	Count:
	bge $s0, $t4, EndCount 		# If the loop passed, go to the next
	move $t6, $t1                 	# Set value to be searched into a register again
	mul $t7, $s0, $t2		# i * patternlength
	sllv $t6, $t6, $t7		# Left shift (i * bit length) to get the bits wanted
	srlv $t6, $t6, $t8		# Right shift (32 - patternlength) to get them to least significant bits
	xor $t3, $t0, $t6		# Operate AND with two values, 
	bne $t3, $0, NotOccurred	# If the result is the pattern itself, 
	addi $s1, $s1, 1 		# increment occurrence
	NotOccurred:
	addi $s0, $s0, 1 		# Increment i
    	j Count                		# Jump back to the loop again
    	EndCount:			# Go to the start
    	move $v0, $s1			# Add occurrence count to $v0 to return
    	jr $ra				# Go to the main if loop ends
	
    	
    
	# Data segment
	.data
	enterprompt: .asciiz "Enter the pattern. "  
	enterprompt2: .asciiz "Enter the value to be searched. "  
	enterprompt3: .asciiz "Enter the pattern bit length. " 
	countprompt: .asciiz "The occurence count of "  
	countprompt2:.asciiz " in "  
	countprompt3:.asciiz " is "  
		


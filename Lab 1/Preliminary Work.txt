CS224
Lab 1
Section 6
Can Avşar
21902111

Accessing Array Elements in MIPS ----------------------------------------------------------------

# CS223 Lab1 Preliminary Work Part 1
# Can Avşar
# 21902111

	# Text segment
	.text
	
   	li  $s0, 0			# Initialize the value i to 0
    	lw  $t7, arrsize			# Declare the array size to a register
    	add $t3, $t3, 2			# This register holds the value 2
    	add $t5, $t5, 4			# This register holds the value 4
    
    	mul $t6, $t5, $t7  		# This operations make the passing from the first element to last element
    	sub $t6, $t6, $t5		# (arrsize - 1) * 4 = 4 * arrsize - 4 gives us the bits between the first value's address and the last value's address

   	div $t7, $t3			# This operations sets the limit for  
    	mflo $t4				# check until the arrsize/2
   	
   	la $s2, arr        		# This is the value arr[i] (first item of the array)
    	add $s3, $s2, $t6		# This is the value arr[arrsize-1] (last item of the array)
    
    
	PRINT:
	bge  $s0, $t7, END_PRINT 		# If the loop passed, go to the next
    	lw $t1,($s2)			# Pass the first element a to a register
	li $v0, 1			# Print the result
 	move $a0, $t1
 	syscall 
 	la $a0, space         		# Print a space for seperation
    	li $v0, 4        		               
   	syscall
    	addi $s2, $s2, 4             	# Go to next element
    	addi    $s0, $s0, 1      		# Increment i (i = i + 1)
    	j PRINT                		# Jump back to the loop again
	
	
	END_PRINT:
	la $a0,endl			# Print a new line
	li $v0,4
	syscall
	la $s2, arr        		# Initialize arr[i] again after the print
	li $s0, 0			# Initialize the value i to 0 again after the print

	
	LOOP:  
   	bge  $s0, $t4, SYMMETRIC 		# If the loop passed correctly, it is symmetric
    	lw $t1,($s2)			# Pass the first element to a register
    	lw $t2,($s3)			# Pass the last element to a register
    	bne $t1, $t2, NOT_SYMMETRIC	# If first and last elements are not equal, arrayt is not symmetric
    	addi $s2, $s2, 4             	# Make the first element the next element
    	addi $s3, $s3, -4 		# Make the last element the previous element
    	addi    $s0, $s0, 1      		# Increment i (i = i + 1)
    	j LOOP                		# Jump back to the loop again


	SYMMETRIC:
	la $a0, prompt2			# Print it is symmetric
	li $v0,4
	syscall
	j END


	NOT_SYMMETRIC:
	la $a0,prompt			# Print it is not symmetric
	li $v0,4
	syscall


	END:
    	li $v0, 10			# End program
    	syscall                   
    
	# Data segment
	
	.data    
	prompt:	.asciiz "The array above is not symmetric."
	prompt2: .asciiz "The array above is symmetric "
	arr:  .word 1, 2, 3, 2, 1   	# Determining the array elements
	arrsize: .word 5			# Determining the array size
	space: .asciiz " "  		# Space
	endl:  .asciiz "\n"		# End line 


Calculating an Arithmetic Expression in MIPS ----------------------------------------------------------------

# CS223 Lab1 Preliminary Work Part 2
# Can Avşar
# 21902111
	
	# Text segment
	.text

	la $a0, prompt1		# Print a prompt to get the value a
	li $v0, 4
	syscall
	
	li $v0, 5		# Read the value a from the user
	syscall
	
	move $t0, $v0		# Pass the value a to a register
	
	la $a0,endl		# Print a new line
	li $v0,4	
	syscall
	
	la $a0, prompt2		# Print a prompt to get the value b
	li $v0, 4
	syscall
	
	li $v0, 5		# Read the value b from the user
	syscall
	
	move $t1, $v0		# Pass the value b to a register
	
	la $a0,endl		# Print a new line
	li $v0,4		
	syscall
	
	la $a0, prompt3		# Print a prompt to get the value c
	li $v0, 4
	syscall
	
	li $v0, 5		# Read the value c from the user
	syscall
	
	move $t2, $v0		# Pass the value c to a register
	
	la $a0,endl		# Print a new line
	li $v0,4	
	syscall
	
	la $a0, prompt4		# Print a prompt to get the value d
	li $v0, 4
	syscall
	
	li $v0, 5		# Read the value d from the user
	syscall
	
	move $t3, $v0		# Pass the value d to a register
	
	la $a0,endl		# Print a new line
	li $v0,4
	syscall
	
	sub $t4, $t1, $t2	# b - c
	
	mul $t4, $t4, $t0	# a * (b - c)
	
	div $t4, $t3		# a * (b - c) % d
	mfhi $t5		
	
	la $a0, prompt5		# Print a string before displaying the result
	li $v0, 4
	syscall
	
	li $v0, 1		# Print the result
 	move $a0, $t5
 	syscall 

    	li $v0, 10		# End program
    	syscall                   
    

	# Data segment
	
	.data    
	prompt1: .asciiz "Please enter the value a: "
	prompt2: .asciiz "Please enter the value b: "
	prompt3: .asciiz "Please enter the value c: "
	prompt4: .asciiz "Please enter the value d: "
	prompt5: .asciiz "The result of a * (b - c) % d is "
	endl:	 .asciiz "\n"
